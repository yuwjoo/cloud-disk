@use 'sass:color';
@use 'sass:math';
@use 'sass:meta';

// 获取css变量
@function getCssVar($args...) {
  @return var(#{joinCssVarName($args...)});
}

// 通过透明度获取颜色
@function getColorByAlpha($name, $alpha) {
  @return rgba(var(joinCssVarName($name, 'rgb')), #{$alpha});
}

// 连接名称
@function joinName($args...) {
  $result: '';
  @each $arg in $args {
    @if $result == '' {
      $result: $arg;
    } @else {
      $result: $result + '-' + $arg;
    }
  }
  @return $result;
}

// 连接css变量名
@function joinCssVarName($args...) {
  @return '--' + joinName($args...);
}

// 获取颜色RGB
@function getColorRGB($color) {
  @return color.channel($color, 'red', $space: rgb) + ', ' +
    color.channel($color, 'green', $space: rgb) + ', ' + color.channel($color, 'blue', $space: rgb);
}

// 获取混合后的颜色
@function getColorMix($mix-color, $color, $num) {
  @return color.mix($mix-color, $color, math.percentage(math.div($num, 10)));
}

// 递归设置css变量
@mixin deep-set-css-vars($parent: '', $key, $value) {
  @if meta.type-of($value) == 'map' {
    @each $k, $v in $value {
      @include deep-set-css-vars(joinName($parent, $key), $k, $v);
    }
  } @else {
    @if $key == 'default' {
      #{joinCssVarName($parent)}: #{$value};
    } @else {
      #{joinCssVarName($parent, $key)}: #{$value};
    }
  }
}
