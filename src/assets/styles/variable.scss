@use 'sass:map';

// 主题模式
$mode: '';

// 基础颜色
$color-white: #ffffff;
$color-black: #000000;
$color-primary: #4f46e5;
$color-success: #16a34a;
$color-warning: #ea580c;
$color-danger: #dc2626;
$color-error: #dc2626;
$color-info: #909399;

// 文字颜色
$text-color: (
  'primary': #303133,
  'regular': #606266,
  'secondary': #909399,
  'placeholder': #a8abb2,
  'disabled': #c0c4cc
);

// 边框颜色
$border-color: (
  '': #dcdfe6,
  'light': #e4e7ed,
  'lighter': #ebeef5,
  'extra-light': #f2f6fc,
  'dark': #d4d7de,
  'darker': #cdd0d6
);

// 填充颜色
$fill-color: (
  '': #f0f2f5,
  'light': #f5f7fa,
  'lighter': #fafafa,
  'extra-light': #fafcff,
  'dark': #ebedf0,
  'darker': #e6e8eb,
  'blank': #ffffff
);

// 背景颜色
$bg-color: (
  '': #ffffff,
  'page': #f2f3f5,
  'overlay': #ffffff
);

// 覆盖颜色
$overlay-color: (
  '': rgba(0, 0, 0, 0.8),
  'light': rgba(0, 0, 0, 0.7),
  'lighter': rgba(0, 0, 0, 0.5)
);

// 遮罩颜色
$mask-color: (
  '': rgba(255, 255, 255, 0.9),
  'extra-light': rgba(255, 255, 255, 0.3)
);

// 阴影
$box-shadow: (
  '': (
    0px 12px 32px 4px rgba(0, 0, 0, 0.04),
    0px 8px 20px rgba(0, 0, 0, 0.08)
  ),
  'light': 0px 0px 12px rgba(0, 0, 0, 0.12),
  'lighter': 0px 0px 6px rgba(0, 0, 0, 0.12),
  'dark': (
    0px 16px 48px 16px rgba(0, 0, 0, 0.08),
    0px 12px 32px rgba(0, 0, 0, 0.12),
    0px 8px 16px -8px rgba(0, 0, 0, 0.16)
  )
);

// 禁用状态颜色
$disabled: (
  'bg-color': map.get($fill-color, 'light'),
  'text-color': map.get($text-color, 'placeholder'),
  'border-color': map.get($border-color, 'light')
);

// 边框属性
$border-width: 1px;
$border-style: solid;
$border-color-hover: map.get($text-color, 'disabled');

// 边框半径
$border-radius: (
  'base': 4px,
  'small': 2px,
  'round': 20px,
  'circle': 100%
);

// 字体设置
$font-family: (
  '':
    "'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', Arial, sans-serif"
);

// 字体大小
$font-size: (
  'extra-large': 20px,
  'large': 18px,
  'medium': 16px,
  'base': 14px,
  'small': 13px,
  'extra-small': 12px
);

// Z-index 值
$z-index: (
  'normal': 1,
  'top': 1000,
  'popper': 2000
);

// 通用组件尺寸
$common-component-size: (
  'large': 40px,
  'default': 32px,
  'small': 24px
);

// 间距
$spacing: (
  'extra-large': 32px,
  'large': 24px,
  'medium': 16px,
  'small': 8px
);

// 行高
$line-height: (
  'extra-large': 2,
  'large': 1.75,
  'default': 1.5,
  'small': 1.2
);

@function joinVarName($list) {
  $name: '';
  @each $item in $list {
    @if $item != '' {
      $name: $name + '-' + $item;
    }
  }
  @return '--' + $name;
}

@mixin set-css-var-value($name, $value) {
  #{joinVarName($name)}: #{$value};
}

// @include set-css-var-type('color', 'primary', $map);
// --el-color-primary: #{map.get($map, 'primary')};
@mixin set-css-var-type($name, $type, $variables) {
  #{getCssVarName($name, $type)}: #{map.get($variables, $type)};
}

@mixin set-css-color-type($colors, $type) {
  @include set-css-var-value(('color', $type), map.get($colors, $type, 'base'));

  @each $i in (3, 5, 7, 8, 9) {
    @include set-css-var-value(
      ('color', $type, 'light', $i),
      map.get($colors, $type, 'light-#{$i}')
    );
  }

  @include set-css-var-value(('color', $type, 'dark-2'), map.get($colors, $type, 'dark-2'));
}

// set all css var for component by map
@mixin set-component-css-var($name, $variables) {
  @each $attribute, $value in $variables {
    @if $attribute == 'default' {
      #{getCssVarName($name)}: #{$value};
    } @else {
      #{getCssVarName($name, $attribute)}: #{$value};
    }
  }
}

@mixin set-css-color-rgb($type) {
  $color: map.get($colors, $type, 'base');
  @include set-css-var-value(('color', $type, 'rgb'), #{red($color), green($color), blue($color)});
}

:root#{$mode} {
  // 基础颜色
  @include set-css-var-value('color-white', $color-white);
  @include set-css-var-value('color-black', $color-black);

  // 基础颜色-rgb
  @each $type in (primary, success, warning, danger, error, info) {
    @include set-css-color-rgb($type);
  }

  // Typography
  @include set-component-css-var('font-size', $font-size);
  @include set-component-css-var('font-family', $font-family);

  @include set-css-var-value('font-weight-primary', 500);
  @include set-css-var-value('font-line-height-primary', 24px);

  // z-index --el-index-#{$type}
  @include set-component-css-var('index', $z-index);

  // --el-border-radius-#{$type}
  @include set-component-css-var('border-radius', $border-radius);

  // Transition
  // refer to this website to get the bezier motion function detail
  // https://cubic-bezier.com/#p1,p2,p3,p4 (change px as your function parameter)
  @include set-component-css-var('transition-duration', $transition-duration);

  @include set-component-css-var('transition-function', $transition-function);
  @include set-component-css-var('transition', $transition);

  // common component size
  @include set-component-css-var('component-size', $common-component-size);

  //   --color-white: $color-white;
  //   @each $name, $color in $baseColors {
  //     #{"--" + $name}: #{$color};
  //     #{"--" + $name + "-rgb"}:
  //       #{color.red($color),
  //       color.green($color),
  //       color.blue($color)};

  //     @each $i in (3, 5, 7, 8, 9) {
  //       @include set-css-var-value(
  //         ('color', $type, 'light', $i),
  //         map.get($colors, $type, 'light-#{$i}')
  //       );
  //     }

  //     @for $i from 1 through 9 {
  //       #{"--" + $name + "-light-" + $i}: #{color.mix(
  //           #ffffff,
  //           $color,
  //           math.percentage(math.div($i, 10))
  //         )};
  //       #{"--" + $name + "-color-dark-" + $i}: #{color.mix(
  //           #000000,
  //           $color,
  //           math.percentage(math.div($i, 10))
  //         )};
  //     }
  //   }

  //   // 浅色主题-相关颜色
  //   @each $name, $color in $lightColors {
  //     #{"--" + $name + "-color"}: #{$color};
  //   }

  //   // 深色主题-相关颜色
  //   @each $name, $color in $darkColors {
  //     #{"--" + $name + "-color"}: #{$color};
  //   }

  //   // 字体大小
  //   @each $name, $size in $sizes {
  //     #{"--" + $name + "-size"}: #{$size};
  //   }

  //   // 间距
  //   @each $name, $size in $spacings {
  //     #{"--" + $name + "-spacing"}: #{$size};
  //   }

  //   // 行高
  //   @each $name, $lineHeight in $lineHeights {
  //     #{"--" + $name + "-line-height"}: #{$lineHeight};
  //   }

  //   // 阴影
  //   @each $name, $shadow in $shadows {
  //     #{"--" + $name + "-shadow"}: #{$shadow};
  //   }

  //   // 圆角
  //   @each $name, $radii in $radiis {
  //     #{"--" + $name + "-radii"}: #{$radii};
  //   }
}
